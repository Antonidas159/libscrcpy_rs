use bitflags::bitflags;

bitflags!{
    ///meta key / modifier state
    struct MetaState: u32{
        const NONE = 0;
        const ALT = 0x02;
        const ALT_LEFT = 0x10;
        const ALT_RIGHT = 0x20;
        const SHIFT = 0x01;
        const SHIFT_LEFT = 0x40;
        const SHIFT_RIGHT = 0x80;
        const SYM = 0x04;
        const FUNCTION = 0x08;
        const CTRL = 0x1000;
        const CTRL_LEFT = 0x2000;
        const CTRL_RIGHT = 0x4000;
        const META = 0x10000;
        const META_LEFT = 0x20000;
        const META_RIGHT = 0x40000;
        const CAPS_LOCK = 0x100000;
        const NUM_LOCK = 0x200000;
        const SCROLL_LOCK = 0x400000;
    }
}

///input event tpyes
enum EventType{
    ///key input event
    KEY = 1,
    ///motion input event
    MOTION = 2,
}

///key event actions
enum KeyAction{
    ///key pressed down
    DOWN = 0,
    ///key released
    UP = 1,
    ///multiple key event in a row
    /// or a complex string is being delivered
    MULTIPLE = 2,
}
bitflags!{
    struct KeyEventFlags: u32{
        ///device woke because of this key event
        const WokeHere = 0x1;
        ///event is generated by software keyboard
        const SoftKeyboard = 0x2;
        ///don't want key event to cause us leave touch mode
        const KeepTouchMode = 0x4;
        ///event come from trusted part of system or user, not a third party component
        const FromSystem = 0x8;
        const EditorAction = 0x10;
        const Canceled = 0x20;
        const VirtualHardKey = 0x40;
        const LongPress = 0x80;
        const CanceledLongPress = 0x100;
        const Tracking = 0x200;
        const FallBack = 0x400;
    }
}
